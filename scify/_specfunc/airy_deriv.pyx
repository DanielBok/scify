import warnings

cimport cython
from libc cimport math as cm

from cython.parallel import prange
import numpy as np

from scify cimport _machine as m
from ._results cimport Result, make_r
from .cheb cimport cheb_eval_mode, cheb_eval_mode_e
from .exp cimport exp_mult_err


cdef:
    double[::1] aif = np.array([
        0.10527461226531408809,
        0.01183613628152997844,
        0.00012328104173225664,
        0.00000062261225638140,
        0.00000000185298887844,
        0.00000000000363328873,
        0.00000000000000504622,
        0.00000000000000000522
    ])
    double[::1] aig = np.array([
        0.021233878150918666852,
        0.086315930335214406752,
        0.001797594720383231358,
        0.000014265499875550693,
        0.000000059437995283683,
        0.000000000152403366479,
        0.000000000000264587660,
        0.000000000000000331562,
        0.000000000000000000314
    ])
    double[::1] aip1 = np.array([
        0.0358865097808301538,
        0.0114668575627764899,
        -0.0007592073583861400,
        0.0000869517610893841,
        -0.0000128237294298592,
        0.0000022062695681038,
        -0.0000004222295185921,
        0.0000000874686415726,
        -0.0000000192773588418,
        0.0000000044668460054,
        -0.0000000010790108052,
        0.0000000002700029447,
        -0.0000000000696480108,
        0.0000000000184489907,
        -0.0000000000050027817,
        0.0000000000013852243,
        -0.0000000000003908218,
        0.0000000000001121536,
        -0.0000000000000326862,
        0.0000000000000096619,
        -0.0000000000000028935,
        0.0000000000000008770,
        -0.0000000000000002688,
        0.0000000000000000832,
        -0.0000000000000000260
    ])
    double[::1] aip2 = np.array([
        0.0065457691989713757,
        0.0023833724120774592,
       -0.0000430700770220586,
        0.0000015629125858629,
       -0.0000000815417186163,
        0.0000000054103738057,
       -0.0000000004284130883,
        0.0000000000389497963,
       -0.0000000000039623161,
        0.0000000000004428184,
       -0.0000000000000536297,
        0.0000000000000069650,
       -0.0000000000000009620,
        0.0000000000000001403,
       -0.0000000000000000215
    ])
    double[::1] bif = np.array([
        -0.097196440416443537390,
        0.149503576843167066571,
        0.003113525387121326042,
        0.000024708570579821297,
        0.000000102949627731379,
        0.000000000263970373987,
        0.000000000000458279271,
        0.000000000000000574283,
        0.000000000000000000544
    ])
    double[::1] bif2 = np.array([
        0.323493987603522033521,
        0.086297871535563559139,
        0.002994025552655397426,
        0.000051430528364661637,
        0.000000525840250036811,
        0.000000003561751373958,
        0.000000000017146864007,
        0.000000000000061663520,
        0.000000000000000171911,
        0.000000000000000000382
    ])
    double[::1] big2 = np.array([
        1.6062999463621294578,
        0.7449088819876088652,
        0.0470138738610277380,
        0.0012284422062548239,
        0.0000173222412256624,
        0.0000001521901652368,
        0.0000000009113560249,
        0.0000000000039547918,
        0.0000000000000130017,
        0.0000000000000000335
    ])
    double[::1] bip1 = np.array([
        -0.1729187351079553719,
        -0.0149358492984694364,
        -0.0005471104951678566,
        0.0001537966292958408,
        0.0000154353476192179,
        -0.0000065434113851906,
        0.0000003728082407879,
        0.0000002072078388189,
        -0.0000000658173336470,
        0.0000000074926746354,
        0.0000000011101336884,
        -0.0000000007265140553,
        0.0000000001782723560,
        -0.0000000000217346352,
        -0.0000000000020302035,
        0.0000000000019311827,
        -0.0000000000006044953,
        0.0000000000001209450,
        -0.0000000000000125109,
        -0.0000000000000019917,
        0.0000000000000015154,
        -0.0000000000000004977,
        0.0000000000000001155,
        -0.0000000000000000186
    ])
    double[::1] bip2 = np.array([
        -0.13269705443526630495,
        -0.00568443626045977481,
        -0.00015643601119611610,
        -0.00001136737203679562,
        -0.00000143464350991284,
        -0.00000018098531185164,
         0.00000000926177343611,
         0.00000001710005490721,
         0.00000000476698163504,
        -0.00000000035195022023,
        -0.00000000058890614316,
        -0.00000000006678499608,
         0.00000000006395565102,
         0.00000000001554529427,
        -0.00000000000792397000,
        -0.00000000000258326243,
         0.00000000000121655048,
         0.00000000000038707207,
        -0.00000000000022487045,
        -0.00000000000004953477,
         0.00000000000004563782,
         0.00000000000000332998,
        -0.00000000000000921750,
         0.00000000000000094157,
         0.00000000000000167154,
        -0.00000000000000055134,
        -0.00000000000000022369,
         0.00000000000000017487,
         0.00000000000000000207
    ])
    double[::1] an20 = np.array([
        0.0126732217145738027,
       -0.0005212847072615621,
       -0.0000052672111140370,
       -0.0000001628202185026,
       -0.0000000090991442687,
       -0.0000000007438647126,
       -0.0000000000795494752,
       -0.0000000000104050944,
       -0.0000000000015932426,
       -0.0000000000002770648,
       -0.0000000000000535343,
       -0.0000000000000113062,
       -0.0000000000000025772,
       -0.0000000000000006278,
       -0.0000000000000001621,
       -0.0000000000000000441
    ])
    double[::1] an21 = np.array([
        0.0198313155263169394,
       -0.0029376249067087533,
       -0.0001136260695958196,
       -0.0000100554451087156,
       -0.0000013048787116563,
       -0.0000002123881993151,
       -0.0000000402270833384,
       -0.0000000084996745953,
       -0.0000000019514839426,
       -0.0000000004783865344,
       -0.0000000001236733992,
       -0.0000000000334137486,
       -0.0000000000093702824,
       -0.0000000000027130128,
       -0.0000000000008075954,
       -0.0000000000002463214,
       -0.0000000000000767656,
       -0.0000000000000243883,
       -0.0000000000000078831,
       -0.0000000000000025882,
       -0.0000000000000008619,
       -0.0000000000000002908,
       -0.0000000000000000993,
       -0.0000000000000000343
    ])
    double[::1] an22 = np.array([
        0.0537418629629794329,
        -0.0126661435859883193,
        -0.0011924334106593007,
        -0.0002032327627275655,
        -0.0000446468963075164,
        -0.0000113359036053123,
        -0.0000031641352378546,
        -0.0000009446708886149,
        -0.0000002966562236472,
        -0.0000000969118892024,
        -0.0000000326822538653,
        -0.0000000113144618964,
        -0.0000000040042691002,
        -0.0000000014440333684,
        -0.0000000005292853746,
        -0.0000000001967763374,
        -0.0000000000740800096,
        -0.0000000000282016314,
        -0.0000000000108440066,
        -0.0000000000042074801,
        -0.0000000000016459150,
        -0.0000000000006486827,
        -0.0000000000002574095,
        -0.0000000000001027889,
        -0.0000000000000412846,
        -0.0000000000000166711,
        -0.0000000000000067657,
        -0.0000000000000027585,
        -0.0000000000000011296,
        -0.0000000000000004645,
        -0.0000000000000001917,
        -0.0000000000000000794,
        -0.0000000000000000330
    ])
    double[::1] aph0 = np.array([
        -0.0855849241130933257,
        0.0011214378867065261,
        0.0000042721029353664,
        0.0000000817607381483,
        0.0000000033907645000,
        0.0000000002253264423,
        0.0000000000206284209,
        0.0000000000023858763,
        0.0000000000003301618,
        0.0000000000000527010,
        0.0000000000000094555,
        0.0000000000000018709,
        0.0000000000000004024,
        0.0000000000000000930,
        0.0000000000000000229
    ])
    double[::1] aph1 = np.array([
        -0.1024172908077571694,
        0.0071697275146591248,
        0.0001209959363122329,
        0.0000073361512841220,
        0.0000007535382954272,
        0.0000001041478171741,
        0.0000000174358728519,
        0.0000000033399795033,
        0.0000000007073075174,
        0.0000000001619187515,
        0.0000000000394539982,
        0.0000000000101192282,
        0.0000000000027092778,
        0.0000000000007523806,
        0.0000000000002156369,
        0.0000000000000635283,
        0.0000000000000191757,
        0.0000000000000059143,
        0.0000000000000018597,
        0.0000000000000005950,
        0.0000000000000001934,
        0.0000000000000000638
    ])
    double[::1] aph2 = np.array([
        -0.2057088719781465107,
        0.0422196961357771922,
        0.0020482560511207275,
        0.0002607800735165006,
        0.0000474824268004729,
        0.0000105102756431612,
        0.0000026353534014668,
        0.0000007208824863499,
        0.0000002103236664473,
        0.0000000644975634555,
        0.0000000205802377264,
        0.0000000067836273921,
        0.0000000022974015284,
        0.0000000007961306765,
        0.0000000002813860610,
        0.0000000001011749057,
        0.0000000000369306738,
        0.0000000000136615066,
        0.0000000000051142751,
        0.0000000000019351689,
        0.0000000000007393607,
        0.0000000000002849792,
        0.0000000000001107281,
        0.0000000000000433412,
        0.0000000000000170801,
        0.0000000000000067733,
        0.0000000000000027017,
        0.0000000000000010835,
        0.0000000000000004367,
        0.0000000000000001769,
        0.0000000000000000719,
        0.0000000000000000294
    ])


@cython.cdivision(True)
@cython.nonecheck(False)
cdef (Result, Result) airy_deriv_mod_phase(double x) nogil:
    cdef:
        double pi34 = 2.356194490192344928847  # 0.75pi
        double z = 0, a, p
        double sqx = cm.sqrt(-x)
        Result amp, phi

    if x < -4:
        z = 128. / x ** 3 + 1
        amp = cheb_eval_mode_e(an20, z, -1, 1)
        phi = cheb_eval_mode_e(aph0, z, -1, 1)
    elif x <= -2:
        z = (128./(x ** 3) + 9) / 7
        amp = cheb_eval_mode_e(an21, z, -1, 1)
        phi = cheb_eval_mode_e(aph1, z, -1, 1)
    elif x <= -1:
        z = (16./(x ** 3) + 9) / 7
        amp = cheb_eval_mode_e(an22, z, -1, 1)
        phi = cheb_eval_mode_e(aph2, z, -1, 1)
    else:
        amp = make_r(0., 0.)
        phi = make_r(0., 0.)

    a = amp.val + 0.3125
    p = phi.val - 0.625

    return (
        make_r(cm.sqrt(a * sqx),
               cm.fabs(amp.val) * (m.DBL_EPSILON + cm.fabs(amp.err / amp.val))),
        make_r(pi34 - x* sqx * p,
               cm.fabs(phi.val) * (m.DBL_EPSILON + cm.fabs(phi.err / phi.val)))
    )

@cython.boundscheck(False)
@cython.wraparound(False)
def airy_Ai_deriv(x):
    """
    Compute the derivative of the Airy function the first kind

    Parameters
    ----------
    x: {array_like, scalar}
        Numerical vector

    Returns
    -------
    array_like or scalar
        Derivative values from the Airy function
    """
    cdef:
        double[:] arr
        int i
        size_t n

    if np.isscalar(x):
        return _airy_Ai_deriv(x).val

    arr = np.ravel(x)
    n = len(arr)
    for i in prange(n, nogil=True):
        arr[i] = _airy_Ai_deriv(arr[i]).val

    return np.reshape(arr, np.shape(x))

@cython.cdivision(True)
@cython.nonecheck(False)
cdef Result _airy_Ai_deriv(double x) nogil:
    cdef:
        Result a, p
        double c, val, err
        double x3 = x ** 3

    if x < -1:
        a, p = airy_deriv_mod_phase(x)
        c = cm.cos(p.val)
        val = a.val * c
        err = cm.fabs(val * p.err) + cm.fabs(c * a.err) + m.DBL_EPSILON * cm.fabs(val)

        return make_r(val, err)

    elif x < 1:
        a = cheb_eval_mode_e(aif, x3, -1, 1)
        p = cheb_eval_mode_e(aig, x3, -1, 1)
        val = x * x * (0.125 + a.val) - p.val - 0.25
        err = cm.fabs(x * x * a.err) + p.err + m.DBL_EPSILON * cm.fabs(val)

        return make_r(val, err)

    elif x3 < 2.25 * m.LOG_DBL_MIN ** 2:
        c = -2. * cm.sqrt(x3) / 3
        a = _airy_Ai_deriv_scaled(x)
        return exp_mult_err(c, 1.5 * cm.fabs(c * m.DBL_EPSILON), a.val, a.err)

    else:
        with gil:
            warnings.warn('Underflow encountered in _airy_Ai_deriv. Value x is too huge')
        return make_r(cm.NAN, cm.NAN)


@cython.boundscheck(False)
@cython.wraparound(False)
def airy_Ai_deriv_scaled(x):
    """
    Compute the scaled derivative of the Airy function the first kind

    Parameters
    ----------
    x: {array_like, scalar}
        Numerical vector

    Returns
    -------
    array_like or scalar
        Derivative values from the Airy function
    """
    cdef:
        double[:] arr
        double err
        int i
        size_t n

    if np.isscalar(x):
        return _airy_Ai_deriv_scaled(x).val

    arr = np.ravel(x)
    n = len(arr)
    for i in prange(n, nogil=True):
        arr[i] = _airy_Ai_deriv_scaled(arr[i]).val

    return np.reshape(arr, np.shape(x))


@cython.cdivision(True)
@cython.nonecheck(False)
cdef Result _airy_Ai_deriv_scaled(double x) nogil:
    cdef:
        Result a, p
        double c, val, err, s
        double sqx = cm.sqrt(x)
        double x3 = x ** 3

    if x < -1:
        a, p = airy_deriv_mod_phase(x)
        c = cm.cos(p.val)
        val = a.val * c
        err = cm.fabs(val * p.err) + cm.fabs(c * a.err) + m.DBL_EPSILON * cm.fabs(val)
        return make_r(val, err)

    elif x <= 1:
        a = cheb_eval_mode_e(aif, x3, -1, 1)
        p = cheb_eval_mode_e(aig, x3, -1, 1)
        val = x * x * (0.125 + a.val) - p.val - 0.25
        err = cm.fabs(x * x * a.val) + p.err + m.DBL_EPSILON * cm.fabs(val)

        if x > m.ROOT3_DBL_EPSILON ** 2:
            s = cm.exp(2. / 3 * x ** 1.5)
            val *= s
            err *= s

        return make_r(val, err)

    elif x <= 4:
        a = cheb_eval_mode_e(aip1, (16. / (x * sqx) - 9) / 7, -1, 1)
    else:
        a = cheb_eval_mode_e(aip2, 16 / (x * sqx) -1, -1, 1)

    s = cm.sqrt(sqx)
    val = -(0.28125 + a.val) * s
    err = a.err * s + m.DBL_EPSILON * cm.fabs(val)
    return make_r(val, err)
